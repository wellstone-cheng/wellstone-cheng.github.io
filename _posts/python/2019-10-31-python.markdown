---
layout: post
title: python
date: 2019-10-27 00:05:00
author: wellstone-cheng
img: python.jpeg
python: true
tags: [python]
---
# 1.Python 安装与卸载

##   1.1 先卸载已安装的Python版本
- 卸载python版本
```
sudo apt-get remove python 
```
- 卸载Python以及他的依赖包
```
sudo apt-get remove --auto-remove python*
```
- 清除python配置文件和数据文件
```
sudo apt-get purge python
sudo apt-get purge --auto-remove python
```
##  1.2 安装最新的Python版本（方法1）
- 安装依赖环境
```
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev python-openssl
```
- 下载Python3.7安装包
```
wget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tgz
tar -zxvf Python-3.7.5.tgz
```
注：使用wget命令比网页下载快很多。

- 进入解压后目录执行./configure
```
./configure --prefix=/usr/local/python3   #/usr/local/python3为安装目录
make
make install
```
- 建立python3的软链
```
ln -s /usr/local/python3/bin/python3 /usr/bin/python3
```
- 将/usr/local/python3/bin加入PATH,在/etc/profile文件末尾加入
```
export PATH=$PATH:/usr/local/python3/bin
```
- 生效在配置信息中环境变量
```
source /etc/profile
```
- 测试是否安装成功
```bash
# python3 -V
Python 3.7.5
# pip3 -V
pip 19.2.3 from /usr/local/python3/lib/python3.7/site-packages/pip (python 3.7)
```
##  1.3 apt-get install 直接安装python（方法2）
-    安装

```
apt install python3-dev python3-pip
```
- 测试是否安装成功
```
# python3 -V                         
Python 3.6.8
# pip3 -V
pip 9.0.1 from /usr/lib/python3/dist-packages (python 3.6)
```
- 升级pip

```
#pip3 install --upgrade pip
Collecting pip
  Downloading https://files.pythonhosted.org/packages/00/b6/9cfa56b4081ad13874b0c6f96af8ce16cfbc1cb06bedf8e9164ce5551ec1/pip-19.3.1-py2.py3-none-any.whl (1.4MB)
    100% |################################| 1.4MB 73kB/s 
# pip3 -V
Traceback (most recent call last):
  File "/usr/bin/pip3", line 9, in <module>
    from pip import main
ImportError: cannot import name 'main'
# pip -V
pip 19.3.1 from /usr/local/lib/python3.6/dist-packages/pip (python 3.6)
```
#  2.Python IDE选择

## 2.1 PyCharm

### 2.1.1 安装与运行
从网页上下载pycharm-community-2019.2.4.tar.gz解压后

```
cd pycharm-community-2019.2.4/bin
sh pycharm.sh &
```

### 2.1.2 配置

  进入File -> Settings -> project:Project Interpreter
  
- project Interpreter

项目解释器，指向Python的执行文件

- package

可以一次选中所有package进行安装？？？
还是需要什么package就一个一个添加？

### 2.1.3 运行状况

- 不需进行任何配置就能运行动态图

## 2.2 Jupyter Notebook

### 2.2.1 可以使用anaconda自带的jupyter
### 2.2.2 配置

- 指定jupyter解释器

找到Jupyter Notebook内核指定的Python环境位置, 打开kernel.json文件, 编辑路径即可
```
{
 "argv": [
  "/root/anaconda3/bin/python",
  "-m",
  "ipykernel_launcher",
  "-f",
  "{connection_file}"
 ],
 "display_name": "Python 3",
 "language": "python"

```

### 2.2.3 运行状况

- 暂时还没解决不能显示动态图的问题

#  3.Python包与环境管理

## 3.1 pip

pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能；
Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。

- pip install

      ```
      sudo pip install packagename
      ```
代表进行全局安装，安装后全局可用。如果是信任的安装包可用使用该命令进行安装
      
      ```
      pip install --user packagename
      ```  
 代表仅该用户的安装，安装后仅该用户可用。处于安全考虑，尽量使用该命令进行安装。
      
 - pip 安装包清单
 
 ```
  pip list
  Package     Version  
  ----------- ---------
  numpy       1.17.3   
  Pillow      6.2.1    
  pip         19.3.1   
  setuptools  41.2.0   
  six         1.12.0   
  torch       1.3.0+cpu
  torchvision 0.4.1+cpu
  virtualenv  16.7.7   

 ```
- pip安装包路径，在Python的安装路径下
```
python3/lib/python3.7/site-packages
```


##  3.2 conda
一个开源的软件包管理系统和环境管理系统，用于安装多个版本的软件包及其依赖关系，并在它们之间轻松切换

##  3.3 anaconda

用于科学计算的python发行版，里面预装好了conda，某个版本的python，众多packages,科学计算工具等。Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了python和相关配套工具

### 3.3.1 从国内镜像中安装anaconda

```
wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2019.10-Linux-x86_64.sh
sh Anaconda3-2019.10-Linux-x86_64.sh
```
注：anaconda中已包含python和conda,conda下载的包默认链接至自带的Python中，可以通过

- conda安装包清单
```
#conda list
```
- conda安装包路径，在anaconda的安装路径下
```
anaconda3/lib/python3.7/site-packages
```
