---
layout: post
title: 关系拟合(回归)
date: 2020-01-17 00:05:00
author: wellstone-cheng
img: pytorch.jpeg
pytorch: true
tags: [pytorch]
---
---
## 所用函数

- **torch.unsqueeze**
  
  torch.unsqueeze(input, dim, out=None) → Tensor
  对数据维度进行扩充,指定位置dim加上维数为1
  <font color='red'> torch只会处理2维的数据??? </font>
  Returns a new tensor with a dimension of size one inserted at the specified position.

  实例如下:

``` python
import torch
x=[1,2,3,4]
x_tenser=torch.Tensor(x)
x_tenser_0=torch.unsqueeze(x_tenser,0)
x_tenser_1=torch.unsqueeze(x_tenser,1)
print(
    '\n x',x,
    '\n x_tenser',x_tenser,
    '\n x_tenser_0',x_tenser_0,
    '\n x_tenser_1',x_tenser_1
)
```
打印如下
```shell
 x [1, 2, 3, 4] 
 x_tenser tensor([1., 2., 3., 4.]) 
 x_tenser_0 tensor([[1., 2., 3., 4.]]) 
 x_tenser_1 tensor([[1.],[2.],[3.],[4.]])
```
* 结论
  
- **torch.linspace**

  torch.linspace(start, end, steps=100, out=None, dtype=None, layout=torch.strided, device=None, requires_grad=False) → Tensor
  Returns a one-dimensional tensor of steps equally spaced points between start and end.
The output tensor is 1-D of size steps.

- **torch.nn.Linear**

  CLASS torch.nn.Linear(in_features, out_features, bias=True)

---

## 建立数据集
``` python
import torch
import matplotlib.pyplot as plt
x_l=torch.linspace(-1,1,100)
x=torch.unsqueeze(x_l,dim=1) #torch.unsqueeze对数据维度进行扩充
y=x.pow(2)+0.2*torch.rand(x.size())# pow 幂
plt.scatter(x.numpy(),y.numpy())
plt.show()
```
显示图片如下


![baby]({{ '/assets/img/scatter.png' | prepend: site.baseurl }})

---
## 回归

代码如下

``` python
import torch
import matplotlib.pyplot as plt
import torch.nn.functional as F
x = torch.unsqueeze(torch.linspace(-1, 1, 100), dim=1)  # x data (tensor), shape=(100, 1)
y = x.pow(2) + 0.2*torch.rand(x.size())                 # noisy y data (tensor), shape=(100, 1)

class Net(torch.nn.Module):
    def __init__(self,n_feature,n_hidden,n_output):
        super(Net,self).__init__()
        self.hidden=torch.nn.Linear(n_feature,n_hidden)
        self.predict=torch.nn.Linear(n_hidden,n_output)

    def forward(self, x):
        x = F.relu(self.hidden(x))
        x = self.predict(x)
        return x

net = Net(n_feature=1,n_hidden=10,n_output=1)
print(net)

optimizer = torch.optim.SGD(net.parameters(),lr=0.2)
loss_func = torch.nn.MSELoss()
plt.ion()

for t in range(2000):
    prediction = net(x)
    loss = loss_func(prediction,y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    if t % 5 == 0:
        plt.cla()
        plt.scatter(x.numpy(),y.numpy())
        plt.plot(x.numpy(),prediction.data.numpy(),'r-',lw=5)
        plt.text(0.5,0,'Loss=%.4f' % loss.data.numpy(), fontdict={'size': 20, 'color':  'red'})
        plt.pause(0.1)

plt.ioff()
plt.show()
```
显示图片如下

![baby]({{ '/assets/img/regression.png' | prepend: site.baseurl }})